plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
    mavenCentral()
    maven { url "https://maven.fabricmc.net/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

remapJar {
    doFirst {
        println "开始重映射，输入文件:"
        File inputJar = tasks.jar.archiveFile.get().asFile
        if (inputJar.exists()) {
            println "输入JAR: ${inputJar.name} (${inputJar.length()} bytes)"
            println "输入内容:"
            exec {
                commandLine 'unzip', '-l', inputJar.absolutePath
            }
        }
    }
    
    doLast {
        File outputJar = archiveFile.get().asFile
        println "重映射完成:"
        println "输出JAR: ${outputJar.name} (${outputJar.length()} bytes)"
        println "输出内容:"
        exec {
            commandLine 'unzip', '-l', outputJar.absolutePath
        }
        
        if (outputJar.length() < 10240) {
            throw new GradleException("重映射失败：输出文件太小")
        }
    }
}
